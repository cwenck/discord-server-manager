name: Continuous Integration

on:
  push:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: discord-server-manager
  # IMAGE_NAME: ${{ github.repository }}

jobs:
  compile-debug:
    name: Compile Debug
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cargo Build
        uses: actions-rs/cargo@v1
        with:
          command: build

  compile-release:
    name: Compile Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code 
        uses: actions/checkout@v3

      - name: Setup Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cargo Release Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - uses: actions/upload-artifact@v2
        with:
          name: release-binary
          path: target/release/discord-server-manager
          retention-days: 5
          if-no-files-found: error

  formatting:
    name: Format
    runs-on: ubuntu-latest
    needs: compile-debug

    steps:
      - name: Checkout Code 
        uses: actions/checkout@v3

      - name: Setup Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cargo Code Formatter Version
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --version

      - name: Cargo Code Format Check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Static Analysis
    runs-on: ubuntu-latest
    needs: compile-debug

    steps:
      - name: Checkout Code 
        uses: actions/checkout@v3

      - name: Setup Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cargo Clippy Version
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --version

      - name: Cargo Clippy Check
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: compile-debug

    steps:
      - name: Checkout Code 
        uses: actions/checkout@v3

      - name: Setup Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cargo Test
        uses: actions-rs/cargo@v1
        with:
          command: test
  docker:
    # Reference : https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions#publishing-a-package-using-an-action
    name: Docker
    runs-on: ubuntu-latest
    needs: [compile-release, tests, formatting, clippy]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: release-binary
          path: target/release/discord-server-manager

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Authenticate with Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build & Push Container Image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
